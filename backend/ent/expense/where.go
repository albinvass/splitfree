// Code generated by ent, DO NOT EDIT.

package expense

import (
	"splitfree/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldUUID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCreatedAt, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCost, v))
}

// ReceiptURL applies equality check predicate on the "receipt_url" field. It's identical to ReceiptURLEQ.
func ReceiptURL(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldReceiptURL, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldUUID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContainsFold(FieldDescription, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldCategory, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldCreatedAt, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldCost, v))
}

// CostContains applies the Contains predicate on the "cost" field.
func CostContains(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContains(FieldCost, v))
}

// CostHasPrefix applies the HasPrefix predicate on the "cost" field.
func CostHasPrefix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasPrefix(FieldCost, v))
}

// CostHasSuffix applies the HasSuffix predicate on the "cost" field.
func CostHasSuffix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasSuffix(FieldCost, v))
}

// CostEqualFold applies the EqualFold predicate on the "cost" field.
func CostEqualFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEqualFold(FieldCost, v))
}

// CostContainsFold applies the ContainsFold predicate on the "cost" field.
func CostContainsFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContainsFold(FieldCost, v))
}

// ReceiptURLEQ applies the EQ predicate on the "receipt_url" field.
func ReceiptURLEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldReceiptURL, v))
}

// ReceiptURLNEQ applies the NEQ predicate on the "receipt_url" field.
func ReceiptURLNEQ(v string) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldReceiptURL, v))
}

// ReceiptURLIn applies the In predicate on the "receipt_url" field.
func ReceiptURLIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldReceiptURL, vs...))
}

// ReceiptURLNotIn applies the NotIn predicate on the "receipt_url" field.
func ReceiptURLNotIn(vs ...string) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldReceiptURL, vs...))
}

// ReceiptURLGT applies the GT predicate on the "receipt_url" field.
func ReceiptURLGT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldReceiptURL, v))
}

// ReceiptURLGTE applies the GTE predicate on the "receipt_url" field.
func ReceiptURLGTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldReceiptURL, v))
}

// ReceiptURLLT applies the LT predicate on the "receipt_url" field.
func ReceiptURLLT(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldReceiptURL, v))
}

// ReceiptURLLTE applies the LTE predicate on the "receipt_url" field.
func ReceiptURLLTE(v string) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldReceiptURL, v))
}

// ReceiptURLContains applies the Contains predicate on the "receipt_url" field.
func ReceiptURLContains(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContains(FieldReceiptURL, v))
}

// ReceiptURLHasPrefix applies the HasPrefix predicate on the "receipt_url" field.
func ReceiptURLHasPrefix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasPrefix(FieldReceiptURL, v))
}

// ReceiptURLHasSuffix applies the HasSuffix predicate on the "receipt_url" field.
func ReceiptURLHasSuffix(v string) predicate.Expense {
	return predicate.Expense(sql.FieldHasSuffix(FieldReceiptURL, v))
}

// ReceiptURLIsNil applies the IsNil predicate on the "receipt_url" field.
func ReceiptURLIsNil() predicate.Expense {
	return predicate.Expense(sql.FieldIsNull(FieldReceiptURL))
}

// ReceiptURLNotNil applies the NotNil predicate on the "receipt_url" field.
func ReceiptURLNotNil() predicate.Expense {
	return predicate.Expense(sql.FieldNotNull(FieldReceiptURL))
}

// ReceiptURLEqualFold applies the EqualFold predicate on the "receipt_url" field.
func ReceiptURLEqualFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldEqualFold(FieldReceiptURL, v))
}

// ReceiptURLContainsFold applies the ContainsFold predicate on the "receipt_url" field.
func ReceiptURLContainsFold(v string) predicate.Expense {
	return predicate.Expense(sql.FieldContainsFold(FieldReceiptURL, v))
}

// HasPaidBy applies the HasEdge predicate on the "paid_by" edge.
func HasPaidBy() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaidByTable, PaidByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaidByWith applies the HasEdge predicate on the "paid_by" edge with a given conditions (other predicates).
func HasPaidByWith(preds ...predicate.User) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newPaidByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebtors applies the HasEdge predicate on the "debtors" edge.
func HasDebtors() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebtorsTable, DebtorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebtorsWith applies the HasEdge predicate on the "debtors" edge with a given conditions (other predicates).
func HasDebtorsWith(preds ...predicate.User) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newDebtorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.NotPredicates(p))
}
