// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/albinvass/splitfree/cmd/splitfree-backend/ent/expense"
	"github.com/albinvass/splitfree/cmd/splitfree-backend/ent/predicate"
	"github.com/albinvass/splitfree/cmd/splitfree-backend/ent/user"
	"github.com/google/uuid"
)

// ExpenseUpdate is the builder for updating Expense entities.
type ExpenseUpdate struct {
	config
	hooks    []Hook
	mutation *ExpenseMutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (eu *ExpenseUpdate) Where(ps ...predicate.Expense) *ExpenseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUUID sets the "uuid" field.
func (eu *ExpenseUpdate) SetUUID(u uuid.UUID) *ExpenseUpdate {
	eu.mutation.SetUUID(u)
	return eu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableUUID(u *uuid.UUID) *ExpenseUpdate {
	if u != nil {
		eu.SetUUID(*u)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExpenseUpdate) SetDescription(s string) *ExpenseUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableDescription(s *string) *ExpenseUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetShares sets the "shares" field.
func (eu *ExpenseUpdate) SetShares(m map[uuid.UUID]float64) *ExpenseUpdate {
	eu.mutation.SetShares(m)
	return eu
}

// SetCategory sets the "category" field.
func (eu *ExpenseUpdate) SetCategory(e expense.Category) *ExpenseUpdate {
	eu.mutation.SetCategory(e)
	return eu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableCategory(e *expense.Category) *ExpenseUpdate {
	if e != nil {
		eu.SetCategory(*e)
	}
	return eu
}

// SetCost sets the "cost" field.
func (eu *ExpenseUpdate) SetCost(s string) *ExpenseUpdate {
	eu.mutation.SetCost(s)
	return eu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableCost(s *string) *ExpenseUpdate {
	if s != nil {
		eu.SetCost(*s)
	}
	return eu
}

// SetReceiptURL sets the "receipt_url" field.
func (eu *ExpenseUpdate) SetReceiptURL(s string) *ExpenseUpdate {
	eu.mutation.SetReceiptURL(s)
	return eu
}

// SetNillableReceiptURL sets the "receipt_url" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableReceiptURL(s *string) *ExpenseUpdate {
	if s != nil {
		eu.SetReceiptURL(*s)
	}
	return eu
}

// ClearReceiptURL clears the value of the "receipt_url" field.
func (eu *ExpenseUpdate) ClearReceiptURL() *ExpenseUpdate {
	eu.mutation.ClearReceiptURL()
	return eu
}

// SetPaidByID sets the "paid_by" edge to the User entity by ID.
func (eu *ExpenseUpdate) SetPaidByID(id int) *ExpenseUpdate {
	eu.mutation.SetPaidByID(id)
	return eu
}

// SetPaidBy sets the "paid_by" edge to the User entity.
func (eu *ExpenseUpdate) SetPaidBy(u *User) *ExpenseUpdate {
	return eu.SetPaidByID(u.ID)
}

// AddDebtorIDs adds the "debtors" edge to the User entity by IDs.
func (eu *ExpenseUpdate) AddDebtorIDs(ids ...int) *ExpenseUpdate {
	eu.mutation.AddDebtorIDs(ids...)
	return eu
}

// AddDebtors adds the "debtors" edges to the User entity.
func (eu *ExpenseUpdate) AddDebtors(u ...*User) *ExpenseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddDebtorIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (eu *ExpenseUpdate) Mutation() *ExpenseMutation {
	return eu.mutation
}

// ClearPaidBy clears the "paid_by" edge to the User entity.
func (eu *ExpenseUpdate) ClearPaidBy() *ExpenseUpdate {
	eu.mutation.ClearPaidBy()
	return eu
}

// ClearDebtors clears all "debtors" edges to the User entity.
func (eu *ExpenseUpdate) ClearDebtors() *ExpenseUpdate {
	eu.mutation.ClearDebtors()
	return eu
}

// RemoveDebtorIDs removes the "debtors" edge to User entities by IDs.
func (eu *ExpenseUpdate) RemoveDebtorIDs(ids ...int) *ExpenseUpdate {
	eu.mutation.RemoveDebtorIDs(ids...)
	return eu
}

// RemoveDebtors removes "debtors" edges to User entities.
func (eu *ExpenseUpdate) RemoveDebtors(u ...*User) *ExpenseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveDebtorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpenseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpenseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpenseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExpenseUpdate) check() error {
	if v, ok := eu.mutation.Category(); ok {
		if err := expense.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Expense.category": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Cost(); ok {
		if err := expense.CostValidator(v); err != nil {
			return &ValidationError{Name: "cost", err: fmt.Errorf(`ent: validator failed for field "Expense.cost": %w`, err)}
		}
	}
	if _, ok := eu.mutation.PaidByID(); eu.mutation.PaidByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Expense.paid_by"`)
	}
	return nil
}

func (eu *ExpenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UUID(); ok {
		_spec.SetField(expense.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(expense.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.Shares(); ok {
		_spec.SetField(expense.FieldShares, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.Category(); ok {
		_spec.SetField(expense.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Cost(); ok {
		_spec.SetField(expense.FieldCost, field.TypeString, value)
	}
	if value, ok := eu.mutation.ReceiptURL(); ok {
		_spec.SetField(expense.FieldReceiptURL, field.TypeString, value)
	}
	if eu.mutation.ReceiptURLCleared() {
		_spec.ClearField(expense.FieldReceiptURL, field.TypeString)
	}
	if eu.mutation.PaidByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.PaidByTable,
			Columns: []string{expense.PaidByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PaidByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.PaidByTable,
			Columns: []string{expense.PaidByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DebtorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDebtorsIDs(); len(nodes) > 0 && !eu.mutation.DebtorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DebtorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExpenseUpdateOne is the builder for updating a single Expense entity.
type ExpenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpenseMutation
}

// SetUUID sets the "uuid" field.
func (euo *ExpenseUpdateOne) SetUUID(u uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.SetUUID(u)
	return euo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableUUID(u *uuid.UUID) *ExpenseUpdateOne {
	if u != nil {
		euo.SetUUID(*u)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExpenseUpdateOne) SetDescription(s string) *ExpenseUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableDescription(s *string) *ExpenseUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetShares sets the "shares" field.
func (euo *ExpenseUpdateOne) SetShares(m map[uuid.UUID]float64) *ExpenseUpdateOne {
	euo.mutation.SetShares(m)
	return euo
}

// SetCategory sets the "category" field.
func (euo *ExpenseUpdateOne) SetCategory(e expense.Category) *ExpenseUpdateOne {
	euo.mutation.SetCategory(e)
	return euo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableCategory(e *expense.Category) *ExpenseUpdateOne {
	if e != nil {
		euo.SetCategory(*e)
	}
	return euo
}

// SetCost sets the "cost" field.
func (euo *ExpenseUpdateOne) SetCost(s string) *ExpenseUpdateOne {
	euo.mutation.SetCost(s)
	return euo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableCost(s *string) *ExpenseUpdateOne {
	if s != nil {
		euo.SetCost(*s)
	}
	return euo
}

// SetReceiptURL sets the "receipt_url" field.
func (euo *ExpenseUpdateOne) SetReceiptURL(s string) *ExpenseUpdateOne {
	euo.mutation.SetReceiptURL(s)
	return euo
}

// SetNillableReceiptURL sets the "receipt_url" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableReceiptURL(s *string) *ExpenseUpdateOne {
	if s != nil {
		euo.SetReceiptURL(*s)
	}
	return euo
}

// ClearReceiptURL clears the value of the "receipt_url" field.
func (euo *ExpenseUpdateOne) ClearReceiptURL() *ExpenseUpdateOne {
	euo.mutation.ClearReceiptURL()
	return euo
}

// SetPaidByID sets the "paid_by" edge to the User entity by ID.
func (euo *ExpenseUpdateOne) SetPaidByID(id int) *ExpenseUpdateOne {
	euo.mutation.SetPaidByID(id)
	return euo
}

// SetPaidBy sets the "paid_by" edge to the User entity.
func (euo *ExpenseUpdateOne) SetPaidBy(u *User) *ExpenseUpdateOne {
	return euo.SetPaidByID(u.ID)
}

// AddDebtorIDs adds the "debtors" edge to the User entity by IDs.
func (euo *ExpenseUpdateOne) AddDebtorIDs(ids ...int) *ExpenseUpdateOne {
	euo.mutation.AddDebtorIDs(ids...)
	return euo
}

// AddDebtors adds the "debtors" edges to the User entity.
func (euo *ExpenseUpdateOne) AddDebtors(u ...*User) *ExpenseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddDebtorIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (euo *ExpenseUpdateOne) Mutation() *ExpenseMutation {
	return euo.mutation
}

// ClearPaidBy clears the "paid_by" edge to the User entity.
func (euo *ExpenseUpdateOne) ClearPaidBy() *ExpenseUpdateOne {
	euo.mutation.ClearPaidBy()
	return euo
}

// ClearDebtors clears all "debtors" edges to the User entity.
func (euo *ExpenseUpdateOne) ClearDebtors() *ExpenseUpdateOne {
	euo.mutation.ClearDebtors()
	return euo
}

// RemoveDebtorIDs removes the "debtors" edge to User entities by IDs.
func (euo *ExpenseUpdateOne) RemoveDebtorIDs(ids ...int) *ExpenseUpdateOne {
	euo.mutation.RemoveDebtorIDs(ids...)
	return euo
}

// RemoveDebtors removes "debtors" edges to User entities.
func (euo *ExpenseUpdateOne) RemoveDebtors(u ...*User) *ExpenseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveDebtorIDs(ids...)
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (euo *ExpenseUpdateOne) Where(ps ...predicate.Expense) *ExpenseUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpenseUpdateOne) Select(field string, fields ...string) *ExpenseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expense entity.
func (euo *ExpenseUpdateOne) Save(ctx context.Context) (*Expense, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpenseUpdateOne) SaveX(ctx context.Context) *Expense {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExpenseUpdateOne) check() error {
	if v, ok := euo.mutation.Category(); ok {
		if err := expense.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Expense.category": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Cost(); ok {
		if err := expense.CostValidator(v); err != nil {
			return &ValidationError{Name: "cost", err: fmt.Errorf(`ent: validator failed for field "Expense.cost": %w`, err)}
		}
	}
	if _, ok := euo.mutation.PaidByID(); euo.mutation.PaidByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Expense.paid_by"`)
	}
	return nil
}

func (euo *ExpenseUpdateOne) sqlSave(ctx context.Context) (_node *Expense, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for _, f := range fields {
			if !expense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UUID(); ok {
		_spec.SetField(expense.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(expense.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.Shares(); ok {
		_spec.SetField(expense.FieldShares, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.Category(); ok {
		_spec.SetField(expense.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Cost(); ok {
		_spec.SetField(expense.FieldCost, field.TypeString, value)
	}
	if value, ok := euo.mutation.ReceiptURL(); ok {
		_spec.SetField(expense.FieldReceiptURL, field.TypeString, value)
	}
	if euo.mutation.ReceiptURLCleared() {
		_spec.ClearField(expense.FieldReceiptURL, field.TypeString)
	}
	if euo.mutation.PaidByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.PaidByTable,
			Columns: []string{expense.PaidByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PaidByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.PaidByTable,
			Columns: []string{expense.PaidByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DebtorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDebtorsIDs(); len(nodes) > 0 && !euo.mutation.DebtorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DebtorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DebtorsTable,
			Columns: []string{expense.DebtorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Expense{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
