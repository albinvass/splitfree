// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/albinvass/splitfree/splitfree-backend/ent/expense"
	"github.com/albinvass/splitfree/splitfree-backend/ent/predicate"
	"github.com/albinvass/splitfree/splitfree-backend/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExpense = "Expense"
	TypeUser    = "User"
)

// ExpenseMutation represents an operation that mutates the Expense nodes in the graph.
type ExpenseMutation struct {
	config
	op             Op
	typ            string
	id             *int
	uuid           *uuid.UUID
	description    *string
	paid_by        *uuid.UUID
	shares         *map[uuid.UUID]float64
	category       *expense.Category
	created_at     *time.Time
	cost           *string
	receipt_url    *string
	clearedFields  map[string]struct{}
	debtors        map[int]struct{}
	removeddebtors map[int]struct{}
	cleareddebtors bool
	done           bool
	oldValue       func(context.Context) (*Expense, error)
	predicates     []predicate.Expense
}

var _ ent.Mutation = (*ExpenseMutation)(nil)

// expenseOption allows management of the mutation configuration using functional options.
type expenseOption func(*ExpenseMutation)

// newExpenseMutation creates new mutation for the Expense entity.
func newExpenseMutation(c config, op Op, opts ...expenseOption) *ExpenseMutation {
	m := &ExpenseMutation{
		config:        c,
		op:            op,
		typ:           TypeExpense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExpenseID sets the ID field of the mutation.
func withExpenseID(id int) expenseOption {
	return func(m *ExpenseMutation) {
		var (
			err   error
			once  sync.Once
			value *Expense
		)
		m.oldValue = func(ctx context.Context) (*Expense, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Expense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExpense sets the old Expense of the mutation.
func withExpense(node *Expense) expenseOption {
	return func(m *ExpenseMutation) {
		m.oldValue = func(context.Context) (*Expense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExpenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExpenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExpenseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExpenseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Expense.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *ExpenseMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ExpenseMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ExpenseMutation) ResetUUID() {
	m.uuid = nil
}

// SetDescription sets the "description" field.
func (m *ExpenseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExpenseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExpenseMutation) ResetDescription() {
	m.description = nil
}

// SetPaidBy sets the "paid_by" field.
func (m *ExpenseMutation) SetPaidBy(u uuid.UUID) {
	m.paid_by = &u
}

// PaidBy returns the value of the "paid_by" field in the mutation.
func (m *ExpenseMutation) PaidBy() (r uuid.UUID, exists bool) {
	v := m.paid_by
	if v == nil {
		return
	}
	return *v, true
}

// OldPaidBy returns the old "paid_by" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldPaidBy(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaidBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaidBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaidBy: %w", err)
	}
	return oldValue.PaidBy, nil
}

// ResetPaidBy resets all changes to the "paid_by" field.
func (m *ExpenseMutation) ResetPaidBy() {
	m.paid_by = nil
}

// SetShares sets the "shares" field.
func (m *ExpenseMutation) SetShares(value map[uuid.UUID]float64) {
	m.shares = &value
}

// Shares returns the value of the "shares" field in the mutation.
func (m *ExpenseMutation) Shares() (r map[uuid.UUID]float64, exists bool) {
	v := m.shares
	if v == nil {
		return
	}
	return *v, true
}

// OldShares returns the old "shares" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldShares(ctx context.Context) (v map[uuid.UUID]float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShares is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShares requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShares: %w", err)
	}
	return oldValue.Shares, nil
}

// ResetShares resets all changes to the "shares" field.
func (m *ExpenseMutation) ResetShares() {
	m.shares = nil
}

// SetCategory sets the "category" field.
func (m *ExpenseMutation) SetCategory(e expense.Category) {
	m.category = &e
}

// Category returns the value of the "category" field in the mutation.
func (m *ExpenseMutation) Category() (r expense.Category, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldCategory(ctx context.Context) (v expense.Category, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *ExpenseMutation) ResetCategory() {
	m.category = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExpenseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExpenseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExpenseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCost sets the "cost" field.
func (m *ExpenseMutation) SetCost(s string) {
	m.cost = &s
}

// Cost returns the value of the "cost" field in the mutation.
func (m *ExpenseMutation) Cost() (r string, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldCost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// ResetCost resets all changes to the "cost" field.
func (m *ExpenseMutation) ResetCost() {
	m.cost = nil
}

// SetReceiptURL sets the "receipt_url" field.
func (m *ExpenseMutation) SetReceiptURL(s string) {
	m.receipt_url = &s
}

// ReceiptURL returns the value of the "receipt_url" field in the mutation.
func (m *ExpenseMutation) ReceiptURL() (r string, exists bool) {
	v := m.receipt_url
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiptURL returns the old "receipt_url" field's value of the Expense entity.
// If the Expense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpenseMutation) OldReceiptURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiptURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiptURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiptURL: %w", err)
	}
	return oldValue.ReceiptURL, nil
}

// ClearReceiptURL clears the value of the "receipt_url" field.
func (m *ExpenseMutation) ClearReceiptURL() {
	m.receipt_url = nil
	m.clearedFields[expense.FieldReceiptURL] = struct{}{}
}

// ReceiptURLCleared returns if the "receipt_url" field was cleared in this mutation.
func (m *ExpenseMutation) ReceiptURLCleared() bool {
	_, ok := m.clearedFields[expense.FieldReceiptURL]
	return ok
}

// ResetReceiptURL resets all changes to the "receipt_url" field.
func (m *ExpenseMutation) ResetReceiptURL() {
	m.receipt_url = nil
	delete(m.clearedFields, expense.FieldReceiptURL)
}

// AddDebtorIDs adds the "debtors" edge to the User entity by ids.
func (m *ExpenseMutation) AddDebtorIDs(ids ...int) {
	if m.debtors == nil {
		m.debtors = make(map[int]struct{})
	}
	for i := range ids {
		m.debtors[ids[i]] = struct{}{}
	}
}

// ClearDebtors clears the "debtors" edge to the User entity.
func (m *ExpenseMutation) ClearDebtors() {
	m.cleareddebtors = true
}

// DebtorsCleared reports if the "debtors" edge to the User entity was cleared.
func (m *ExpenseMutation) DebtorsCleared() bool {
	return m.cleareddebtors
}

// RemoveDebtorIDs removes the "debtors" edge to the User entity by IDs.
func (m *ExpenseMutation) RemoveDebtorIDs(ids ...int) {
	if m.removeddebtors == nil {
		m.removeddebtors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.debtors, ids[i])
		m.removeddebtors[ids[i]] = struct{}{}
	}
}

// RemovedDebtors returns the removed IDs of the "debtors" edge to the User entity.
func (m *ExpenseMutation) RemovedDebtorsIDs() (ids []int) {
	for id := range m.removeddebtors {
		ids = append(ids, id)
	}
	return
}

// DebtorsIDs returns the "debtors" edge IDs in the mutation.
func (m *ExpenseMutation) DebtorsIDs() (ids []int) {
	for id := range m.debtors {
		ids = append(ids, id)
	}
	return
}

// ResetDebtors resets all changes to the "debtors" edge.
func (m *ExpenseMutation) ResetDebtors() {
	m.debtors = nil
	m.cleareddebtors = false
	m.removeddebtors = nil
}

// Where appends a list predicates to the ExpenseMutation builder.
func (m *ExpenseMutation) Where(ps ...predicate.Expense) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExpenseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExpenseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Expense, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExpenseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExpenseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Expense).
func (m *ExpenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExpenseMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.uuid != nil {
		fields = append(fields, expense.FieldUUID)
	}
	if m.description != nil {
		fields = append(fields, expense.FieldDescription)
	}
	if m.paid_by != nil {
		fields = append(fields, expense.FieldPaidBy)
	}
	if m.shares != nil {
		fields = append(fields, expense.FieldShares)
	}
	if m.category != nil {
		fields = append(fields, expense.FieldCategory)
	}
	if m.created_at != nil {
		fields = append(fields, expense.FieldCreatedAt)
	}
	if m.cost != nil {
		fields = append(fields, expense.FieldCost)
	}
	if m.receipt_url != nil {
		fields = append(fields, expense.FieldReceiptURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExpenseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case expense.FieldUUID:
		return m.UUID()
	case expense.FieldDescription:
		return m.Description()
	case expense.FieldPaidBy:
		return m.PaidBy()
	case expense.FieldShares:
		return m.Shares()
	case expense.FieldCategory:
		return m.Category()
	case expense.FieldCreatedAt:
		return m.CreatedAt()
	case expense.FieldCost:
		return m.Cost()
	case expense.FieldReceiptURL:
		return m.ReceiptURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExpenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case expense.FieldUUID:
		return m.OldUUID(ctx)
	case expense.FieldDescription:
		return m.OldDescription(ctx)
	case expense.FieldPaidBy:
		return m.OldPaidBy(ctx)
	case expense.FieldShares:
		return m.OldShares(ctx)
	case expense.FieldCategory:
		return m.OldCategory(ctx)
	case expense.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case expense.FieldCost:
		return m.OldCost(ctx)
	case expense.FieldReceiptURL:
		return m.OldReceiptURL(ctx)
	}
	return nil, fmt.Errorf("unknown Expense field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExpenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case expense.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case expense.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case expense.FieldPaidBy:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaidBy(v)
		return nil
	case expense.FieldShares:
		v, ok := value.(map[uuid.UUID]float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShares(v)
		return nil
	case expense.FieldCategory:
		v, ok := value.(expense.Category)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case expense.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case expense.FieldCost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case expense.FieldReceiptURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiptURL(v)
		return nil
	}
	return fmt.Errorf("unknown Expense field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExpenseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExpenseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExpenseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Expense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExpenseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(expense.FieldReceiptURL) {
		fields = append(fields, expense.FieldReceiptURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExpenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExpenseMutation) ClearField(name string) error {
	switch name {
	case expense.FieldReceiptURL:
		m.ClearReceiptURL()
		return nil
	}
	return fmt.Errorf("unknown Expense nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExpenseMutation) ResetField(name string) error {
	switch name {
	case expense.FieldUUID:
		m.ResetUUID()
		return nil
	case expense.FieldDescription:
		m.ResetDescription()
		return nil
	case expense.FieldPaidBy:
		m.ResetPaidBy()
		return nil
	case expense.FieldShares:
		m.ResetShares()
		return nil
	case expense.FieldCategory:
		m.ResetCategory()
		return nil
	case expense.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case expense.FieldCost:
		m.ResetCost()
		return nil
	case expense.FieldReceiptURL:
		m.ResetReceiptURL()
		return nil
	}
	return fmt.Errorf("unknown Expense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExpenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.debtors != nil {
		edges = append(edges, expense.EdgeDebtors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExpenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case expense.EdgeDebtors:
		ids := make([]ent.Value, 0, len(m.debtors))
		for id := range m.debtors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExpenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddebtors != nil {
		edges = append(edges, expense.EdgeDebtors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExpenseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case expense.EdgeDebtors:
		ids := make([]ent.Value, 0, len(m.removeddebtors))
		for id := range m.removeddebtors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExpenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddebtors {
		edges = append(edges, expense.EdgeDebtors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExpenseMutation) EdgeCleared(name string) bool {
	switch name {
	case expense.EdgeDebtors:
		return m.cleareddebtors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExpenseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Expense unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExpenseMutation) ResetEdge(name string) error {
	switch name {
	case expense.EdgeDebtors:
		m.ResetDebtors()
		return nil
	}
	return fmt.Errorf("unknown Expense edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	uuid            *uuid.UUID
	name            *string
	email           *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	expenses        map[int]struct{}
	removedexpenses map[int]struct{}
	clearedexpenses bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *UserMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *UserMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *UserMutation) ResetUUID() {
	m.uuid = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddExpenseIDs adds the "expenses" edge to the Expense entity by ids.
func (m *UserMutation) AddExpenseIDs(ids ...int) {
	if m.expenses == nil {
		m.expenses = make(map[int]struct{})
	}
	for i := range ids {
		m.expenses[ids[i]] = struct{}{}
	}
}

// ClearExpenses clears the "expenses" edge to the Expense entity.
func (m *UserMutation) ClearExpenses() {
	m.clearedexpenses = true
}

// ExpensesCleared reports if the "expenses" edge to the Expense entity was cleared.
func (m *UserMutation) ExpensesCleared() bool {
	return m.clearedexpenses
}

// RemoveExpenseIDs removes the "expenses" edge to the Expense entity by IDs.
func (m *UserMutation) RemoveExpenseIDs(ids ...int) {
	if m.removedexpenses == nil {
		m.removedexpenses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.expenses, ids[i])
		m.removedexpenses[ids[i]] = struct{}{}
	}
}

// RemovedExpenses returns the removed IDs of the "expenses" edge to the Expense entity.
func (m *UserMutation) RemovedExpensesIDs() (ids []int) {
	for id := range m.removedexpenses {
		ids = append(ids, id)
	}
	return
}

// ExpensesIDs returns the "expenses" edge IDs in the mutation.
func (m *UserMutation) ExpensesIDs() (ids []int) {
	for id := range m.expenses {
		ids = append(ids, id)
	}
	return
}

// ResetExpenses resets all changes to the "expenses" edge.
func (m *UserMutation) ResetExpenses() {
	m.expenses = nil
	m.clearedexpenses = false
	m.removedexpenses = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.uuid != nil {
		fields = append(fields, user.FieldUUID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUUID:
		return m.UUID()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUUID:
		return m.OldUUID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUUID:
		m.ResetUUID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.expenses != nil {
		edges = append(edges, user.EdgeExpenses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeExpenses:
		ids := make([]ent.Value, 0, len(m.expenses))
		for id := range m.expenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedexpenses != nil {
		edges = append(edges, user.EdgeExpenses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeExpenses:
		ids := make([]ent.Value, 0, len(m.removedexpenses))
		for id := range m.removedexpenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexpenses {
		edges = append(edges, user.EdgeExpenses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeExpenses:
		return m.clearedexpenses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeExpenses:
		m.ResetExpenses()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
